#BlueJ class context
comment0.params=
comment0.target=WUGraph()
comment0.text=\n\ WUGraph()\ constructs\ a\ graph\ having\ no\ vertices\ or\ edges.\n\n\ Running\ time\:\ \ O(1).\n
comment1.params=
comment1.target=int\ vertexCount()
comment1.text=\n\ vertexCount()\ returns\ the\ number\ of\ vertices\ in\ the\ graph.\n\n\ Running\ time\:\ \ O(1).\n
comment10.params=u\ v\ weight
comment10.target=void\ addEdge(java.lang.Object,\ java.lang.Object,\ int)
comment10.text=\n\ addEdge()\ adds\ an\ edge\ (u,\ v)\ to\ the\ graph.\ \ If\ either\ of\ the\ parameters\n\ u\ and\ v\ does\ not\ represent\ a\ vertex\ of\ the\ graph,\ the\ graph\ is\ unchanged.\n\ The\ edge\ is\ assigned\ a\ weight\ of\ "weight".\ \ If\ the\ graph\ already\ contains\n\ edge\ (u,\ v),\ the\ weight\ is\ updated\ to\ reflect\ the\ new\ value.\ \ Self-edges\n\ (where\ u\ \=\=\ v)\ are\ allowed.\n\n\ Running\ time\:\ \ O(1).\n
comment11.params=u\ v
comment11.target=void\ removeEdge(java.lang.Object,\ java.lang.Object)
comment11.text=\n\ removeEdge()\ removes\ an\ edge\ (u,\ v)\ from\ the\ graph.\ \ If\ either\ of\ the\n\ parameters\ u\ and\ v\ does\ not\ represent\ a\ vertex\ of\ the\ graph,\ the\ graph\n\ is\ unchanged.\ \ If\ (u,\ v)\ is\ not\ an\ edge\ of\ the\ graph,\ the\ graph\ is\n\ unchanged.\n\n\ Running\ time\:\ \ O(1).\n
comment12.params=u\ v
comment12.target=boolean\ isEdge(java.lang.Object,\ java.lang.Object)
comment12.text=\n\ isEdge()\ returns\ true\ if\ (u,\ v)\ is\ an\ edge\ of\ the\ graph.\ \ Returns\ false\n\ if\ (u,\ v)\ is\ not\ an\ edge\ (including\ the\ case\ where\ either\ of\ the\n\ parameters\ u\ and\ v\ does\ not\ represent\ a\ vertex\ of\ the\ graph).\n\n\ Running\ time\:\ \ O(1).\n
comment13.params=u\ v
comment13.target=Edge\ findEdge(java.lang.Object,\ java.lang.Object)
comment14.params=u\ v
comment14.target=int\ weight(java.lang.Object,\ java.lang.Object)
comment14.text=\n\ weight()\ returns\ the\ weight\ of\ (u,\ v).\ \ Returns\ zero\ if\ (u,\ v)\ is\ not\n\ an\ edge\ (including\ the\ case\ where\ either\ of\ the\ parameters\ u\ and\ v\ does\n\ not\ represent\ a\ vertex\ of\ the\ graph).\n\n\ (NOTE\:\ \ A\ well-behaved\ application\ should\ try\ to\ avoid\ calling\ this\n\ method\ for\ an\ edge\ that\ is\ not\ in\ the\ graph,\ and\ should\ certainly\ not\n\ treat\ the\ result\ as\ if\ it\ actually\ represents\ an\ edge\ with\ weight\ zero.\n\ However,\ some\ sort\ of\ default\ response\ is\ necessary\ for\ missing\ edges,\n\ so\ we\ return\ zero.\ \ An\ exception\ would\ be\ more\ appropriate,\ but\ also\ more\n\ annoying.)\n\n\ Running\ time\:\ \ O(1).\n
comment2.params=
comment2.target=int\ edgeCount()
comment2.text=\n\ edgeCount()\ returns\ the\ total\ number\ of\ edges\ in\ the\ graph.\n\n\ Running\ time\:\ \ O(1).\n
comment3.params=
comment3.target=java.lang.Object[]\ getVertices()
comment3.text=\n\ getVertices()\ returns\ an\ array\ containing\ all\ the\ objects\ that\ serve\n\ as\ vertices\ of\ the\ graph.\ \ The\ array's\ length\ is\ exactly\ equal\ to\ the\n\ number\ of\ vertices.\ \ If\ the\ graph\ has\ no\ vertices,\ the\ array\ has\ length\n\ zero.\n\n\ (NOTE\:\ \ Do\ not\ return\ any\ internal\ data\ structure\ you\ use\ to\ represent\n\ vertices\!\ \ Return\ only\ the\ same\ objects\ that\ were\ provided\ by\ the\n\ calling\ application\ in\ calls\ to\ addVertex().)\n\n\ Running\ time\:\ \ O(|V|).\n
comment4.params=vertex
comment4.target=void\ addVertex(java.lang.Object)
comment4.text=\n\ addVertex()\ adds\ a\ vertex\ (with\ no\ incident\ edges)\ to\ the\ graph.\n\ The\ vertex's\ "name"\ is\ the\ object\ provided\ as\ the\ parameter\ "vertex".\n\ If\ this\ object\ is\ already\ a\ vertex\ of\ the\ graph,\ the\ graph\ is\ unchanged.\n\n\ Running\ time\:\ \ O(1).\n
comment5.params=vertex
comment5.target=void\ removeVertex(java.lang.Object)
comment5.text=\n\ removeVertex()\ removes\ a\ vertex\ from\ the\ graph.\ \ All\ edges\ incident\ on\ the\n\ deleted\ vertex\ are\ removed\ as\ well.\ \ If\ the\ parameter\ "vertex"\ does\ not\n\ represent\ a\ vertex\ of\ the\ graph,\ the\ graph\ is\ unchanged.\n\n\ Running\ time\:\ \ O(d),\ where\ d\ is\ the\ degree\ of\ "vertex".\n
comment6.params=vertex
comment6.target=boolean\ isVertex(java.lang.Object)
comment6.text=\n\ isVertex()\ returns\ true\ if\ the\ parameter\ "vertex"\ represents\ a\ vertex\ of\n\ the\ graph.\n\n\ Running\ time\:\ \ O(1).\n
comment7.params=u
comment7.target=Vertex\ findVertex(java.lang.Object)
comment8.params=vertex
comment8.target=int\ degree(java.lang.Object)
comment8.text=\n\ degree()\ returns\ the\ degree\ of\ a\ vertex.\ \ Self-edges\ add\ only\ one\ to\ the\n\ degree\ of\ a\ vertex.\ \ If\ the\ parameter\ "vertex"\ doesn't\ represent\ a\ vertex\n\ of\ the\ graph,\ zero\ is\ returned.\n\n\ Running\ time\:\ \ O(1).\n
comment9.params=vertex
comment9.target=Neighbors\ getNeighbors(java.lang.Object)
comment9.text=\n\ getNeighbors()\ returns\ a\ new\ Neighbors\ object\ referencing\ two\ arrays.\ \ The\n\ Neighbors.neighborList\ array\ contains\ each\ object\ that\ is\ connected\ to\ the\n\ input\ object\ by\ an\ edge.\ \ The\ Neighbors.weightList\ array\ contains\ the\n\ weights\ of\ the\ corresponding\ edges.\ \ The\ length\ of\ both\ arrays\ is\ equal\ to\n\ the\ number\ of\ edges\ incident\ on\ the\ input\ vertex.\ \ If\ the\ vertex\ has\n\ degree\ zero,\ or\ if\ the\ parameter\ "vertex"\ does\ not\ represent\ a\ vertex\ of\n\ the\ graph,\ null\ is\ returned\ (instead\ of\ a\ Neighbors\ object).\n\n\ The\ returned\ Neighbors\ object,\ and\ the\ two\ arrays,\ are\ both\ newly\ created.\n\ No\ previously\ existing\ Neighbors\ object\ or\ array\ is\ changed.\n\n\ (NOTE\:\ \ In\ the\ neighborList\ array,\ do\ not\ return\ any\ internal\ data\n\ structure\ you\ use\ to\ represent\ vertices\!\ \ Return\ only\ the\ same\ objects\n\ that\ were\ provided\ by\ the\ calling\ application\ in\ calls\ to\ addVertex().)\n\n\ Running\ time\:\ \ O(d),\ where\ d\ is\ the\ degree\ of\ "vertex".\n
numComments=15
